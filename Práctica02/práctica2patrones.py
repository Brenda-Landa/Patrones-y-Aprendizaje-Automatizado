# -*- coding: utf-8 -*-
"""Práctica2Patrones

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qEtUPcqAjNiaISFF5GuOH9lnCxwZrhVF
"""

from keras.datasets import mnist
import numpy as np

(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Se obtiene una muestra con igual número de: cincos vs no cincos
# para el conjunto de entrenamiento y el de test
idx_y_train_5 = np.where(y_train == 5)[0]
idx_y_train_n5 = np.where(y_train != 5)[0]
idx_y_train_n5 = np.random.choice(idx_y_train_n5, idx_y_train_5.shape[0], replace=False)

idx_y_train = np.concatenate([idx_y_train_5, idx_y_train_n5])
np.random.shuffle(idx_y_train)

x_train = x_train[idx_y_train]
y_train = y_train[idx_y_train]
print(x_train.shape)

idx_y_test_5 = np.where(y_test == 5)[0]
idx_y_test_n5 = np.where(y_test != 5)[0]
idx_y_test_n5 = np.random.choice(idx_y_test_n5, idx_y_test_5.shape[0], replace=False)

idx_y_test = np.concatenate([idx_y_test_5, idx_y_test_n5])
np.random.shuffle(idx_y_test)

x_test = x_test[idx_y_test]
y_test = y_test[idx_y_test]
print(x_test.shape)

y_train_binary = (y_train == 5).astype(int)
y_test_binary = (y_test == 5).astype(int)

from keras.models import Sequential
from keras.layers import Flatten, Dense
from keras.metrics import F1Score

model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(1)
])

print(model.summary())

model.compile(loss='binary_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train_binary, epochs=4, batch_size=2000, validation_split=0.9)

model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(1)
])

print(model.summary())

model.compile(loss='binary_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train_binary, epochs=20, batch_size=2000, validation_split=0.9)

model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(1)
])

print(model.summary())

model.compile(loss='binary_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train_binary, epochs=4, batch_size=2, validation_split=0.9)

model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(1)
])

print(model.summary())

model.compile(loss='binary_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train_binary, epochs=4, batch_size=2000, validation_split=0.01)

model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(1)
])

print(model.summary())

model.compile(loss='binary_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train_binary, epochs=35, batch_size=2000, validation_split=0.03)

from sklearn.metrics import confusion_matrix, \
precision_score, recall_score,f1_score

y_pred = (model.predict(x_test) >= 0.5).astype(int)[:,0]

conf_matrix = confusion_matrix(y_test_binary, y_pred)
print("Matriz de confusión:")
print(conf_matrix)

precision = precision_score(y_test_binary, y_pred)
print("Precision_1:", precision)
recall = recall_score(y_test_binary, y_pred)
print("Recall_1:", recall)
f1_s = f1_score(y_test_binary, y_pred)
print("F1-score_1:", f1_s)


precision_0 = precision_score(y_test_binary, y_pred, pos_label=0)
print("Precision_0:", precision_0)
recall_0 = recall_score(y_test_binary, y_pred, pos_label=0)
print("Recall_0:", recall_0)
f1_s_0 = f1_score(y_test_binary, y_pred, pos_label=0)
print("F1-score_0:", f1_s_0)